FROM artifactory.voya.net/docker-virtual/openshift/ubi8/openjdk-8:latest

USER root

ARG TARGETPLATFORM
ARG RUNNER_VERSION
ARG RUNNER_CONTAINER_HOOKS_VERSION
ARG CHANNEL=stable
ARG DOCKER_VERSION=24.0.7
ARG DOCKER_COMPOSE_VERSION=v2.23.0
ARG DUMB_INIT_VERSION=1.2.5
ARG RUNNER_USER_UID=1001
ARG DOCKER_GROUP_GID=121

# 1. Install packages using microdnf
RUN microdnf install -y \
    git \
    curl \
    jq \
    unzip \
    zip \
    sudo \
    shadow-utils \
    which && \
    microdnf clean all

# 2. Create user and docker group
RUN groupadd --gid ${DOCKER_GROUP_GID} docker && \
    useradd -m -u ${RUNNER_USER_UID} -G docker,sudo runner && \
    echo "%sudo   ALL=(ALL:ALL) NOPASSWD:ALL" > /etc/sudoers && \
    echo "Defaults env_keep += \"DEBIAN_FRONTEND\"" >> /etc/sudoers

ENV HOME=/home/runner

# 3. Install Git LFS (manual RPM method for RHEL)
RUN curl -s -o /tmp/git-lfs.rpm https://packagecloud.io/github/git-lfs/packages/el/8/git-lfs-3.4.0-1.el8.x86_64.rpm/download.rpm && \
    rpm -i /tmp/git-lfs.rpm && \
    rm -f /tmp/git-lfs.rpm

# 4. Install GitHub runner
ENV RUNNER_ASSETS_DIR=/runnertmp
RUN ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) && \
    [ "$ARCH" = "amd64" ] && ARCH="x64" || true && \
    mkdir -p "$RUNNER_ASSETS_DIR" && cd "$RUNNER_ASSETS_DIR" && \
    curl -fLo runner.tar.gz https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-${ARCH}-${RUNNER_VERSION}.tar.gz && \
    tar xzf ./runner.tar.gz && rm runner.tar.gz && \
    ./bin/installdependencies.sh

# 5. Install libyaml (required for setup-ruby)
RUN microdnf install -y libyaml && microdnf clean all

# 6. Install Docker CLI
RUN ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) && \
    [ "$ARCH" = "amd64" ] && ARCH="x86_64" || true && \
    curl -fLo docker.tgz https://download.docker.com/linux/static/${CHANNEL}/${ARCH}/docker-${DOCKER_VERSION}.tgz && \
    tar zxvf docker.tgz && \
    install -o root -g root -m 755 docker/docker /usr/bin/docker && \
    rm -rf docker docker.tgz

# 7. Install Docker Compose plugin
RUN ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) && \
    [ "$ARCH" = "amd64" ] && ARCH="x86_64" || true && \
    mkdir -p /usr/libexec/docker/cli-plugins && \
    curl -fLo /usr/libexec/docker/cli-plugins/docker-compose \
        https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-${ARCH} && \
    chmod +x /usr/libexec/docker/cli-plugins/docker-compose && \
    ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/bin/docker-compose && \
    docker compose version

# 8. Hosted tools dir
ENV RUNNER_TOOL_CACHE=/opt/hostedtoolcache
RUN mkdir -p /opt/hostedtoolcache && \
    chgrp docker /opt/hostedtoolcache && chmod g+rwx /opt/hostedtoolcache

# 9. Install container hooks
RUN cd "$RUNNER_ASSETS_DIR" && \
    curl -fLo runner-container-hooks.zip https://github.com/actions/runner-container-hooks/releases/download/v${RUNNER_CONTAINER_HOOKS_VERSION}/actions-runner-hooks-k8s-${RUNNER_CONTAINER_HOOKS_VERSION}.zip && \
    unzip runner-container-hooks.zip -d ./k8s && \
    rm -f runner-container-hooks.zip

# 10. Copy entrypoint scripts and docker shim
COPY entrypoint.sh startup.sh logger.sh graceful-stop.sh update-status /usr/bin/
COPY docker-shim.sh /usr/local/bin/docker
COPY hooks /etc/arc/hooks/

# 11. Set image metadata
ENV PATH="${PATH}:${HOME}/.local/bin/"
ENV ImageOS=ubi8
RUN echo "PATH=${PATH}" > /etc/environment && \
    echo "ImageOS=${ImageOS}" >> /etc/environment

USER runner

ENTRYPOINT ["/bin/bash", "-c"]
CMD ["entrypoint.sh"]

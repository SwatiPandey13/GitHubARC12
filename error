FROM registry.access.redhat.com/ubi8/ubi:latest

ARG TARGETPLATFORM
ARG RUNNER_VERSION
ARG RUNNER_CONTAINER_HOOKS_VERSION
ARG CHANNEL=stable
ARG DOCKER_VERSION=24.0.7
ARG DOCKER_COMPOSE_VERSION=v2.23.0
ARG DUMB_INIT_VERSION=1.2.5
ARG RUNNER_USER_UID=1001
ARG DOCKER_GROUP_GID=121

RUN dnf update -y && \
    dnf install -y \
        curl \
        ca-certificates \
        git \
        jq \
        sudo \
        unzip \
        zip \
        libicu \
        krb5-libs \
        zlib \
        openssl-libs \
        shadow-utils \
        findutils \
        libyaml-devel \
    && dnf clean all

RUN curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh | bash && \
    dnf install -y git-lfs && \
    git lfs install

RUN groupadd --gid $DOCKER_GROUP_GID docker && \
    useradd --uid $RUNNER_USER_UID -g $DOCKER_GROUP_GID --create-home runner && \
    usermod -aG wheel runner && \
    echo "%wheel        ALL=(ALL)       NOPASSWD: ALL" > /etc/sudoers.d/wheel && \
    chmod 0440 /etc/sudoers.d/wheel

ENV HOME=/home/runner

RUN ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) && \
    if [ "$ARCH" = "arm64" ]; then ARCH=aarch64; fi && \
    if [ "$ARCH" = "amd64" ] || [ "$ARCH" = "i386" ]; then ARCH=x86_64; fi && \
    curl -fLo /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v${DUMB_INIT_VERSION}/dumb-init_${DUMB_INIT_VERSION}_${ARCH} && \
    chmod +x /usr/bin/dumb-init

ENV RUNNER_ASSETS_DIR=/runnertmp
RUN ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) && \
    if [ "$ARCH" = "amd64" ] || [ "$ARCH" = "x86_64" ] || [ "$ARCH" = "i386" ]; then ARCH=x64; fi && \
    mkdir -p "$RUNNER_ASSETS_DIR" && \
    cd "$RUNNER_ASSETS_DIR" && \
    curl -fLo runner.tar.gz https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-${ARCH}-${RUNNER_VERSION}.tar.gz && \
    tar xzf ./runner.tar.gz && \
    rm runner.tar.gz && \
    ./bin/installdependencies.sh && \
    mv ./externals ./externalstmp

# FIX: Use numeric UID/GID instead of names
RUN cp -r $RUNNER_ASSETS_DIR/* $HOME/ && \
    chown -R $RUNNER_USER_UID:$DOCKER_GROUP_GID $HOME

ENV RUNNER_TOOL_CACHE=/opt/hostedtoolcache
RUN mkdir /opt/hostedtoolcache && \
    chgrp $DOCKER_GROUP_GID /opt/hostedtoolcache && \
    chmod g+rwx /opt/hostedtoolcache

RUN cd "$RUNNER_ASSETS_DIR" && \
    curl -fLo runner-container-hooks.zip https://github.com/actions/runner-container-hooks/releases/download/v${RUNNER_CONTAINER_HOOKS_VERSION}/actions-runner-hooks-k8s-${RUNNER_CONTAINER_HOOKS_VERSION}.zip && \
    unzip ./runner-container-hooks.zip -d ./k8s && \
    rm -f runner-container-hooks.zip

COPY entrypoint.sh startup.sh logger.sh graceful-stop.sh update-status /usr/bin/
COPY docker-shim.sh /usr/local/bin/docker
COPY hooks /etc/arc/hooks/

ENV PATH="${PATH}:${HOME}/.local/bin"
ENV ImageOS=rhel8

RUN echo "PATH=${PATH}" > /etc/environment && \
    echo "ImageOS=${ImageOS}" >> /etc/environment

RUN chmod +x /usr/bin/entrypoint.sh /usr/bin/startup.sh /usr/bin/logger.sh /usr/bin/graceful-stop.sh /usr/local/bin/docker

WORKDIR $HOME

USER runner

ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["/bin/bash", "-c", "entrypoint.sh"]
